@using Newtonsoft.Json

@model List<CanvasLMS.Models.ViewModels.EvaluationItemViewModel>

@{
    ViewData["Title"] = "Grades";
    var groups = ViewData["Groups"] as List<CanvasLMS.Models.Entities.Group>;
    var student = ViewData["Student"] as CanvasLMS.Models.ViewModels.SessionViewModel;
    //Settings used when serializing the model into a Json, this is used to update the edit modal based on the selected edit button
    var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore, // or ReferenceLoopHandling.Serialize
                MaxDepth = 32, // set your desired maximum depth
            };
}
@if (ViewBag.Professor != null)
{
    <!-- Modal for creating an Evaluation Item-->
    <div class="modal fade" id="addEvaluation" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @await Html.PartialAsync("_CreateEvaluationItem", new CanvasLMS.Models.ViewModels.EvaluationItemViewModel(), ViewData)
                </div>
            </div>
        </div>
    </div>
    <!-- Modal for updating an Evaluation Item-->
    <div class="modal fade" id="updateEvaluation" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="p-3">
                        <div class="text-center mb-3">
                            <h4>Update Evaluation Item</h4>
                        </div>

                        <form id="updateItemForm" method="post">
                            <div class="row">
                                <!-- Add hidden field for EvaluationItem Id -->
                                <input type="hidden" name="IdUpdate" id="IdUpdate" />
                                <input type="hidden" name="CourseCycleIdUpdate" id="CourseCycleIdUpdate" />

                                <div class="col-12">
                                    <div class="form-group mb-3">
                                        <label for="NameUpdate">Name</label>
                                        <input name="NameUpdate" id="NameUpdate" class="form-control" />
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="form-group mb-3">
                                        <label for="DescriptionUpdate">Description</label>
                                        <textarea name="DescriptionUpdate" id="DescriptionUpdate" class="form-control"></textarea>
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="form-group mb-3">
                                        <label for="PercentageUpdate">Percentage</label>
                                        <input name="PercentageUpdate" id="PercentageUpdate" class="form-control" />
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="form-group mb-3">
                                        <input type="checkbox" name="IsGroupalUpdate" id="IsGroupalUpdate" data-val="true" value="true"/>
                                        <label for="IsGroupalUpdate">In Groups</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary">Update Evaluation Item</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal for Delete Confirmation -->
    <div class="modal fade" id="deleteModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Enrollment</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this evaluation item?
                    This will delete all of the tasks and submissions assigned to it. 
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">I'm Sure</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    @* Banner and side menu *@
    @await Html.PartialAsync("_Banner", ViewData)
    <div class="col-12 col-lg-1 d-flex justify-content-center align-items-start">
        @if (student != null)
        {
            @await Html.PartialAsync("_NavBarStudent")
        }
        else if (ViewBag.Professor != null)
        {
            @await Html.PartialAsync("_NavBarProfessor")
        }
    </div>

    @* Here goes the main screen *@
    <div class="col mx-3 row">
        <div class="col-9 d-flex align-items-center">
            <h2>Grades</h2>
        </div>

        @if (ViewBag.Professor != null)
        {
            <div class="col-3 d-flex justify-content-end mb-3">
                <div>
                    <a data-bs-toggle="modal" data-bs-target="#addEvaluation" class="icon icon-fill rounded d-flex align-items-center justify-content-center"><i class='bx bx-plus fs-1 my-auto' style="color:#b44fd1"></i></a>
                </div>
            </div>
        }

        @*  Accordion to Display Evaluation Items *@
        @if (Model.Count() < 1)
        {
            <div class="text-center d-flex justify-content-center align-items-center" style="min-height:500px">
                <div class="d-flex flex-column justify-content-center">
                    <i class='text-center bx bxs-alarm-exclamation fs-1'></i>
                    <p>No Evaluation Items added</p>
                </div>
            </div>
        }
        else
        {
            <div class="accordion" id="evaluationAccordion">
                @* Inserts accordion item based on the evaluation items found *@
                @foreach (var evaluationItem in Model)
                {
                    var evaluationItemAccordionId = evaluationItem.Name.Replace(" ", "-"); //Var used to give an unique identifies to the accordion Id

                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@evaluationItemAccordionId" aria-expanded="false" aria-controls="@evaluationItemAccordionId">
                                @evaluationItem.Name - @evaluationItem.Percentage.ToString().Insert(evaluationItem.Percentage.ToString().Count(), "%")
                            </button>
                        </h2>
                        <div id="@evaluationItemAccordionId" class="accordion-collapse collapse">
                            <div class="accordion-body">
                                <div class="row">
                                    <div class="col-12 col-md-9 my-3">
                                        @if (evaluationItem.IsGroupal)
                                        {
                                            <p>This Evaluation Item is graded <span class="text-decoration-underline">in groups</span></p>
                                        }
                                        else
                                        {
                                            <p>This Evaluation Item is graded <span class="text-decoration-underline">individually</span></p>
                                        }
                                        <p><b>Description:</b> @evaluationItem.Description</p>
                                        <p class="fw-bold">Percentage: @evaluationItem.Percentage.ToString().Insert(evaluationItem.Percentage.ToString().Count(), "%")</p>
                                    </div>
                                    @* Edit and Delete Buttons *@
                                    @if (ViewBag.Professor != null)
                                    {
                                        <div class="col-12 col-md-3 d-flex justify-content-end mb-3 mb-md-auto">
                                            <button onclick="populateUpdateFormAndShowModal(@evaluationItem.Id)" class="btn btn-primary me-3"><i class='bx bxs-edit'></i></button>
                                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal"
                                                    data-evaluation-item-id="@evaluationItem.Id">
                                                <i class='bx bxs-trash'></i>
                                            </button>
                                        </div>
                                    }
                                    @if (ViewBag.Student != null)
                                    {

                                    }
                                    @* If there are tasks it will load another accordion *@
                                    @if (evaluationItem.Tasks != null)
                                    {
                                        <div class="col-12 ">
                                            <div class="accordion" id="taskAccordion">
                                                @foreach (var task in evaluationItem.Tasks)
                                                {
                                                    var taskAccordionId = @task.Name.Replace(" ", $"_").Insert(task.Name.Count(), evaluationItemAccordionId); //Var used to give an unque identifier to the accordion

                                                    <div class="accordion-item">
                                                        <h2 class="accordion-header">
                                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@taskAccordionId" aria-expanded="false" aria-controls="@taskAccordionId">
                                                                @task.Name - @task.Points pts
                                                            </button>
                                                        </h2>
                                                        <div id="@taskAccordionId" class="accordion-collapse collapse">
                                                            <div class="accordion-body">
                                                                <div class="row">
                                                                    <div class="col-12">
                                                                        <p class="fw-bold">Points: @task.Points pts</p>
                                                                        <p><b>Description:</b> @task.Description</p>
                                                                    </div>
                                                                    @* If there are any submissions and the student is logged then it will show their current submission score *@
                                                                    @if (student != null && task.Submissions.Any())
                                                                    {
                                                                        foreach (var submission in task.Submissions)
                                                                        {
                                                                            if (submission.StudentId == student.UserId)
                                                                            {
                                                                                <div class="col-12">
                                                                                    @if (submission.Score != null)
                                                                                    {
                                                                                        <p class="fw-bold">Grade: @submission.Score pts</p>
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <p class="fw-bold">Not yet graded</p>
                                                                                    }
                                                                                </div>
                                                                            }
                                                                        }
                                                                    }
                                                                    @* Logic if the task is groupal as per the Evluation Item *@
                                                                    @if (evaluationItem.IsGroupal && ViewBag.Professor != null)
                                                                    {
                                                                        @if (groups != null && task.Submissions.Count() > 0)
                                                                        {
                                                                            <div class="col-12 my-3">
                                                                                <div class="accordion" id="groupAccordion">
                                                                                    @foreach (var group in groups)
                                                                                    {
                                                                                        @if (group.Students != null)
                                                                                        {
                                                                                            <table class="table table-hover border border-1 rounded">
                                                                                                <thead>
                                                                                                <th>Group</th>
                                                                                                <th>Id</th>
                                                                                                <th>Name</th>
                                                                                                <th>Score</th>
                                                                                                </thead>
                                                                                                <tbody>
                                                                                                    @foreach (var submission in task.Submissions)
                                                                                                    {

                                                                                                        @foreach (var studentInGroup in group.Students)
                                                                                                        {
                                                                                                            @if (submission.StudentId == studentInGroup.Id)
                                                                                                            {
                                                                                                                <tr>
                                                                                                                    <td>@group.Id</td>
                                                                                                                    <td>@studentInGroup.Id</td>
                                                                                                                    <td>@studentInGroup.FirstName @studentInGroup.LastName</td>
                                                                                                                    <td>@submission.Score</td>
                                                                                                                </tr>
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                </tbody>
                                                                                            </table>
                                                                                        }
                                                                                    }
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                    }
                                                                    else if (!evaluationItem.IsGroupal && ViewBag.Professor != null)
                                                                    {
                                                                        if (task.Submissions.Any())
                                                                        {
                                                                            <table class="table table-hover border border-1 rounded">
                                                                                <thead>
                                                                                <th>Id</th>
                                                                                <th>Name</th>
                                                                                <th>Score</th>
                                                                                </thead>
                                                                                <tbody>
                                                                                    @foreach (var submission in task.Submissions)
                                                                                    {
                                                                                        <tr>
                                                                                            <td>@submission.Student.Id</td>
                                                                                            <td>@submission.Student.FirstName @submission.Student.LastName</td>
                                                                                            <td>@submission.Score</td>
                                                                                        </tr>
                                                                                    }
                                                                                </tbody>
                                                                            </table>
                                                                        }
                                                                    }

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            //Function to populate Name of Evaluation if its Attendance
            var evaluationNameInput = $("#Name");
            var attendanceCheckbox = $("#attendanceCheckbox");
            var attendanceCheckboxUpdate = $("#attendanceCheckboxUpdate");
            var updateItemForm = $("#updateItemForm");

            // Initial setup
            updateInputState();

            // Handle checkbox click event
            attendanceCheckbox.on("click", function () {
                updateInputState();
            });

            // Function to update input state based on checkbox state
            function updateInputState() {
                if (attendanceCheckbox.prop("checked")) {
                    // Checkbox is checked, set input value to 'Attendance' and make it read-only
                    evaluationNameInput.val("Attendance");
                } 
            }

            //Function to post the Enrollment
            $('#createItemForm').submit(function (e) {
                e.preventDefault(); // Prevent the default form submission

                var formData = $(this).serialize(); // Serialize the form data

                $.ajax({
                    type: 'POST',
                    url: '/Evaluation/CreateItem',
                    data: formData,
                    success: function (response) {
                        if (response === '200') {
                            window.location.href = window.location.href.includes('?')
                                ? window.location.href + '&showToast=evaluationItemCreated'
                                : window.location.href + '?showToast=evaluationItemCreated';
                        } else {
                            displayToast(response, 'danger');
                        }
                    },
                    error: function () {
                        displayToast('Error occurred during the request.', 'danger');
                    }
                });
            });

            //Function to delete Student enrollment
            $('#deleteModal').on('show.bs.modal', function (e) {
                var evaluationItemId = $(e.relatedTarget).data('evaluation-item-id');

                $('#confirmDelete').click(function () {
                    $.ajax({
                        type: 'POST',
                        url: '/Evaluation/DeleteItem',
                        data: { evaluationItemId: evaluationItemId },
                        success: function (response) {
                            if (response === '200') {
                                location.href = window.location.href + '?displayToast=evaluationDeleted';
                            } else {
                                displayToast(response, "danger");
                            }
                        }
                    });
                });
            });

            // Function to post the updated EvaluationItem
            updateItemForm.submit(function (e) {
                e.preventDefault(); // Prevent the default form submission

                var formData = $(this).serializeArray(); // Serialize the form data as an array

                // Remove "Update" from each property name
                formData = formData.map(function (item) {
                    item.name = item.name.replace(/Update$/, ''); // Remove "Update" from the end of the name
                    return item;
                });

                // Convert the modified array back to a serialized string
                formData = $.param(formData);
                console.log(formData)

                $.ajax({
                    type: 'POST',
                    url: '/Evaluation/UpdateItem',
                    data: formData,
                    success: function (response) {
                        if (response === '200') {
                            // Handle success
                            window.location.href = window.location.href.includes('?')
                                ? window.location.href + '&showToast=evaluationItemUpdated'
                                : window.location.href + '?showToast=evaluationItemUpdated';
                        } else {
                            // Handle error
                            displayToast(response, 'danger');
                        }
                    },
                    error: function () {
                        // Handle error
                        displayToast('Error occurred during the request.', 'danger');
                    }
                });
            });
        });

        function populateUpdateFormAndShowModal(evaluationItemId) {
            // Convert Razor model to JSON
            var jsonData = @Html.Raw(JsonConvert.SerializeObject(Model, settings));

            // Find the evaluation item with the given ID
            var evaluationItem = jsonData.find(item => item.Id === evaluationItemId);

            // Check if the item was found
            if (evaluationItem) {
                // Populate form fields
                $("#IdUpdate").val(evaluationItem.Id);
                $("#NameUpdate").val(evaluationItem.Name);
                $("#CourseCycleIdUpdate").val(evaluationItem.CourseCycleId);
                $("#DescriptionUpdate").val(evaluationItem.Description);
                $("#PercentageUpdate").val(evaluationItem.Percentage);
                $("#IsGroupalUpdate").prop("checked", evaluationItem.IsGroupal);

                // Show the Bootstrap modal
                $("#updateEvaluation").modal('show');
            } else {
                console.log("Evaluation item not found.");
            }
        }

    </script>
}