@using CanvasLMS.Models.ViewModels
@using Newtonsoft.Json
@model List<GroupViewModel> 
@{
    ViewData["Title"] = "Groups";
    var professor = ViewBag.Professor;

    //Settings used when serializing the model into a Json, this is used to update the edit modal based on the selected edit button
    var settings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore, // or ReferenceLoopHandling.Serialize
                MaxDepth = 32, // set your desired maximum depth
            };
    var jsonData = Html.Raw(JsonConvert.SerializeObject(Model, settings));
}
@if (professor != null)
{
    <!-- Modal -->
    <div class="modal fade" id="editGroupModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @await Html.PartialAsync("_EditGroup", ViewData) 
                </div>
            </div>
        </div>
    </div>
    <!-- Modal for Delete Confirmation -->
    <div class="modal fade" id="deleteModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Enrollment</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this enrollment?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">I'm Sure</button>
                </div>
            </div>
        </div>
    </div>
}
<div class="row">
    @await Html.PartialAsync("_Banner", ViewData)
    <div class="col-12 col-lg-1 d-flex justify-content-center align-items-start">
        @if (ViewBag.Student != null)
        {
            @await Html.PartialAsync("_NavBarStudent")
        }
        else if (professor != null)
        {
            @await Html.PartialAsync("_NavBarProfessor")
        }
    </div>

    @* Here goes the main screen *@
    <div class="col">
        <div class="row ms-lg-5 mx-auto">
            @* Navigation *@
            <div class="col-12">
                <ul class="nav nav-tabs flex-row justify-content-start ">
                    <li class="nav-item">
                        <a class="nav-link" aria-current="page" href="@Url.Content("~/Enrollment/Students/"+ViewData["CourseCycleId"])">Students</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active">Groups</a>
                    </li>
                </ul>
            </div>
            @* Groups Tab *@
            <div class="col-12 border p-3">
                @if (professor != null)
                {
                    <div class=" col-12 d-flex justify-content-end">
                        <div>
                            <a id="createGroupBtn" class="icon icon-fill rounded d-flex align-items-center justify-content-center"><i class='bx bx-plus fs-1 my-auto' style="color:#b44fd1"></i></a>
                        </div>
                    </div>
                }

                @if (Model.Any())
                {
                    <div class="row my-3 g-3">
                        @foreach (var group in Model)
                        {
                            <div class="col-12 col-md-6">
                                <div class="card bg-light p-3 h-100">
                                    <div class="d-flex justify-content-between">
                                        <h6 class="fw-bold"> Group @group.Id</h6>
                                        @if (professor != null)
                                        {
                                            <div>
                                                <button class="btn btn-primary me-3" onclick="openEditModal(@group.Id)"><i class='bx bxs-edit-alt text-white'></i></button>
                                                <button class="btn btn-danger" onclick="deleteGroup(@group.Id, @group.CourseCycleId)"><i class='bx bxs-trash text-white'></i></button>
                                            </div>
                                        }
                                    </div>
                                    <div>
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Email</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var student in group.Students)
                                                {
                                                    <tr>
                                                        <td>@student.FirstName @student.LastName</td>
                                                        <td>@student.Email</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p>No groups found.</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        //Serialized model
        var groups = @jsonData;

        var allStudents = @Html.Raw(JsonConvert.SerializeObject(ViewData["Students"], settings));
        var availableStudents = [];

        function updateAvailableStudents(selectedGroupId) {
            
            var selectedGroup = groups.find(group => group.Id === selectedGroupId);
            if (!selectedGroup) return;

            var assignedStudentIds = [];
            groups.map(group => group.Students.map(student => assignedStudentIds.push(student.Id)));

            // Filter out assigned students from all students
            availableStudents = allStudents.filter(student => !assignedStudentIds.includes(student.Id));

            var studentDropdown = $('#studentDropdown');
            studentDropdown.empty(); // Clear the current options
            availableStudents.forEach(function (student) {
                studentDropdown.append(new Option(student.IdFullName, student.Id));
            });
        }

        function deleteGroup(groupId, courseCycleId) {
            $.ajax({
                type: 'POST',
                url: '/Enrollment/DeleteGroup',
                data: {
                    Id: groupId,
                    CourseCycleId: courseCycleId
                },
                success: function (response) {
                    if (response === '200') {
                        location.href = window.location.href + '?showToast=groupDeleted';
                    } else {
                        showToast(response, "success");
                    }
                },
                error: function () {
                    showToast('Error occurred while deleting the group.', "danger");
                }
            });
        }

        function openEditModal(groupId) {
            var group = groups.find(g => g.Id === groupId);
            if (group) {
                $('#studentsTable tbody').empty(); // Clear the table
                
                group.Students.forEach(function (student) { // Add current students to the table
                    $('#studentsTable tbody').append(
                        '<tr data-student-id="' + student.Id + '">' +
                        '<td>' + student.FirstName + ' ' + student.LastName + '</td>' +
                        '<td>' + student.Email + '</td>' +
                        '<td><button type="button" class="btn btn-danger removeStudentButton"><i class="bx bxs-trash text-white"></i></button></td>' +
                        '</tr>'
                    );
                });

                // Update the hidden input fields
                $('#groupId').val(group.Id);
                $('#courseCycleId').val(group.CourseCycleId);
            }
            updateAvailableStudents(groupId); // Update the dropdown
            $('#editGroupModal').modal('show');
        }
        $(document).ready(function () {
            
            // Event listener for the create group button
            $("#createGroupBtn").click(function () {
                $.ajax({
                    type: 'POST',
                    url: '/Enrollment/CreateGroup',
                    data: { CourseCycleId: @ViewData["CourseCycleId"] }, // Pass the course cycle ID
                    success: function (response) {
                        if (response === '200') {
                            location.href = window.location.href + '?showToast=groupAdded';
                        } else {
                            showToast(response, "success");
                        }
                    },
                    error: function () {
                        showToast('Error occurred while creating the group.',"danger");
                    }
                });
            });

            $('#addStudentButton').click(function () {
                var selectedStudentId = $('#studentDropdown').val();
                var selectedStudent = availableStudents.find(s => s.Id == selectedStudentId);

                if (selectedStudent) {
                    $('#studentsTable tbody').append(
                        '<tr data-student-id="' + selectedStudent.Id + '">' +
                        '<td>' + selectedStudent.FirstName + ' ' + selectedStudent.LastName + '</td>' +
                        '<td>' + selectedStudent.Email + '</td>' +
                        '<td><button type="button" class="btn btn-danger removeStudentButton"><i class="bx bxs-trash text-white"></button></td>' +
                        '</tr>'
                    );
                    // Remove the added student from the availableStudents array and update the dropdown
                    availableStudents = availableStudents.filter(s => s.Id != selectedStudentId);
                    $('#studentDropdown option[value="' + selectedStudentId + '"]').remove();
                }
            });

            $(document).on('click', '.removeStudentButton', function () {
                var row = $(this).closest('tr');
                var studentId = row.data('student-id');
                row.remove();

                // Add the removed student back to the availableStudents array
                var removedStudent = allStudents.find(s => s.Id == studentId);
                console.log(removedStudent)
                if (removedStudent) {
                    availableStudents.push(removedStudent);
                    // Update the dropdown
                    $('#studentDropdown').append(new Option(removedStudent.IdFullName, removedStudent.Id));
                }
            });

            // Collect all student IDs from the table and send them back to the server
            $('#saveGroupButton').click(function () {
                // Collect student IDs from the table
                var studentIds = [];
                $('#studentsTable tbody tr').each(function () {
                    var studentId = $(this).data('student-id');
                    studentIds.push(studentId);
                });

                // Update the group model
                var groupId = $('#groupId').val(); 
                var courseCycleId = $('#courseCycleId').val(); 
                
                // Make AJAX request to the API
                $.ajax({
                    type: 'POST',
                    url: '/Enrollment/EditGroup',
                    // contentType: 'application/json',
                    data: {
                        Id: parseInt(groupId),
                        CourseCycleId: parseInt(courseCycleId),
                        StudentIds: studentIds
                    },
                    success: function (response) {
                        if (response === '200') {
                            // Handle success
                            location.href = window.location.href + '?showToast=groupUpdated';
                        } else {
                            // Handle error
                            showToast(response, "danger");
                        }
                    },
                    error: function () {
                        // Handle error
                        showToast('Error occurred while saving the group.', "danger");
                    }
                });
            });

        });

    </script>
}