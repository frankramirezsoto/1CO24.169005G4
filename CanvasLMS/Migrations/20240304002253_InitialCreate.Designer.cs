// <auto-generated />
using System;
using CanvasLMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CanvasLMS.Migrations
{
    [DbContext(typeof(LMSDbContext))]
    [Migration("20240304002253_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CanvasLMS.Models.Entities.AcademicLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToTable("AcademicLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bachelor Degree"
                        });
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Attendance", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("CourseCycleId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId", "CourseCycleId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Career", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Careers");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            AcademicLevelId = 1,
                            FacultyId = 1,
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 102,
                            AcademicLevelId = 1,
                            FacultyId = 1,
                            Name = "Business Intelligence"
                        });
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CourseCycleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClassDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClassTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("Id", "CourseCycleId");

                    b.HasIndex("CourseCycleId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.ClassPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("CourseCycleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("ClassId", "CourseCycleId");

                    b.ToTable("ClassPaths");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "165003",
                            Description = "Web apps design course is a comprehensive program that teaches students the principles and practical skills needed to create visually appealing and user-friendly web applications. Participants will learn key concepts in user interface (UI) and user experience (UX) design, including wireframing, prototyping, and usability testing. The course may cover design tools and software, as well as coding languages relevant to web development. Throughout the course, students will gain hands-on experience by working on real-world projects, honing their ability to design engaging and functional web interfaces. Whether you're a beginner or looking to enhance your design skills, this course provides a solid foundation for creating effective and aesthetically pleasing web applications.",
                            Name = "Web Applications Design"
                        },
                        new
                        {
                            Id = "169005",
                            Description = "System Design, Analysis, and Implementation is a comprehensive program that equips students with the knowledge and skills necessary to architect, analyze, and implement complex systems. Participants will delve into the fundamentals of system design, learning how to conceptualize and model systems, conduct thorough analysis of requirements, and develop effective solutions. The course covers various methodologies for system design and emphasizes the importance of a systematic approach to problem-solving. Students will gain practical experience in implementing systems, including coding and testing, and understand the principles of scalability, efficiency, and maintainability. By the end of the course, participants will be well-versed in the entire lifecycle of system development, from initial design to successful implementation, preparing them for roles in software development, IT consulting, and other technology-driven fields.",
                            Name = "System Design, Analysis and Implementation"
                        });
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.CourseCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CycleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupNo")
                        .HasColumnType("int");

                    b.Property<string>("MeetingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeOfDay")
                        .HasColumnType("time");

                    b.Property<int>("maxQuota")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("CourseId");

                    b.HasIndex("CycleId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("CourseCycles");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Cycle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isCurrentCycle")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Cycles");

                    b.HasData(
                        new
                        {
                            Id = "1CO24",
                            EndDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isCurrentCycle = true
                        });
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Enrollment", b =>
                {
                    b.Property<int>("CourseCycleId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FinalScore")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CourseCycleId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.EvaluationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseCycleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroupal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("CourseCycleId");

                    b.ToTable("EvaluationItems");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.EvaluationTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluationItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Points")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("EvaluationItemId");

                    b.ToTable("EvaluationTasks");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Engineering"
                        });
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CourseCycleId")
                        .HasColumnType("int");

                    b.HasKey("Id", "CourseCycleId");

                    b.HasIndex("CourseCycleId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Professor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Professors");

                    b.HasData(
                        new
                        {
                            Id = 166666666,
                            Email = "framirezs869@ulacit.ed.cr",
                            FirstName = "Frank",
                            LastName = "Ramirez",
                            Password = "Admin123!"
                        });
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 116800869,
                            Email = "josue.ramirez@ulacit.ed.cr",
                            FirstName = "Josue",
                            LastName = "Ramirez",
                            Password = "Ulacit123!"
                        });
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.TaskSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluationTaskId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Score")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("EvaluationTaskId");

                    b.HasIndex("StudentId");

                    b.ToTable("TaskSubmissions");
                });

            modelBuilder.Entity("CareerCourse", b =>
                {
                    b.Property<int>("CareersId")
                        .HasColumnType("int");

                    b.Property<string>("CoursesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CareersId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CareerCourse", (string)null);

                    b.HasData(
                        new
                        {
                            CareersId = 101,
                            CoursesId = "169005"
                        },
                        new
                        {
                            CareersId = 101,
                            CoursesId = "165003"
                        });
                });

            modelBuilder.Entity("CareerProfessor", b =>
                {
                    b.Property<int>("CareersId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorsId")
                        .HasColumnType("int");

                    b.HasKey("CareersId", "ProfessorsId");

                    b.HasIndex("ProfessorsId");

                    b.ToTable("ProfessorCareer", (string)null);

                    b.HasData(
                        new
                        {
                            CareersId = 101,
                            ProfessorsId = 166666666
                        },
                        new
                        {
                            CareersId = 102,
                            ProfessorsId = 166666666
                        });
                });

            modelBuilder.Entity("CareerStudent", b =>
                {
                    b.Property<int>("CareersId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("CareersId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CareerStudent");
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsCourseCycleId")
                        .HasColumnType("int");

                    b.HasKey("StudentsId", "GroupsId", "GroupsCourseCycleId");

                    b.HasIndex("GroupsId", "GroupsCourseCycleId");

                    b.ToTable("GroupStudent");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Attendance", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.Student", "Student")
                        .WithMany("Attendance")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Class", "Class")
                        .WithMany("Attendance")
                        .HasForeignKey("ClassId", "CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Career", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.AcademicLevel", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Class", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.CourseCycle", "CourseCycle")
                        .WithMany("Classes")
                        .HasForeignKey("CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Professor", "Professor")
                        .WithMany("Classes")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCycle");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.ClassPath", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.Class", "Class")
                        .WithMany("FilePaths")
                        .HasForeignKey("ClassId", "CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.CourseCycle", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Professor", "Professor")
                        .WithMany("CourseCycles")
                        .HasForeignKey("ProfessorId");

                    b.Navigation("Course");

                    b.Navigation("Cycle");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Enrollment", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.CourseCycle", "CourseCycle")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCycle");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.EvaluationItem", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.CourseCycle", "CourseCycle")
                        .WithMany("EvaluationItems")
                        .HasForeignKey("CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCycle");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.EvaluationTask", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.EvaluationItem", "EvaluationItem")
                        .WithMany("Tasks")
                        .HasForeignKey("EvaluationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationItem");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Group", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.CourseCycle", "CourseCycle")
                        .WithMany("Groups")
                        .HasForeignKey("CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCycle");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.TaskSubmission", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.EvaluationTask", "EvaluationTask")
                        .WithMany("Submissions")
                        .HasForeignKey("EvaluationTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationTask");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CareerCourse", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerProfessor", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerStudent", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.HasOne("CanvasLMS.Models.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CanvasLMS.Models.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId", "GroupsCourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Class", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("FilePaths");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.CourseCycle", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Enrollments");

                    b.Navigation("EvaluationItems");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.EvaluationItem", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.EvaluationTask", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Professor", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("CourseCycles");
                });

            modelBuilder.Entity("CanvasLMS.Models.Entities.Student", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("Enrollments");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
